datasource db {
    provider     = "postgresql"
    url          = env("POSTGRES_PRISMA_ACCELERATE_URL")
    directUrl    = env("POSTGRES_URL_NON_POOLING")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String             @id @default(cuid())
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    name          String?            @db.Text
    ghUsername    String?            @unique // GitHub username
    email         String             @unique
    emailVerified DateTime?
    image         String?            @db.Text
    accounts      Account[]
    sessions      Session[]
    shops         ShopCollaborator[]
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @map("refreshToken") @db.Text
    refresh_token_expires_in Int?     @map("refreshTokenExpiresIn")
    access_token             String?  @map("accessToken") @db.Text
    expires_at               Int?     @map("expiresAt")
    token_type               String?  @map("tokenType")
    scope                    String?
    id_token                 String?  @map("idToken") @db.Text
    session_state            String?  @map("sessionState")

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    sessionToken String   @unique
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires      DateTime

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ShopCollaborator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shopId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String

    @@index([shopId])
    @@index([userId])
}

model Shop {
    id                 String             @id // Based on the name, for example `nordcom-demo`.
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    name               String             @db.Text
    domain             String             @unique @db.Text
    alternativeDomains String[]           @default([])
    branding           ShopBranding?
    icons              ShopIcons?
    commerceProvider   CommerceProvider?
    contentProvider    ContentProvider?
    checkoutProvider   CheckoutProvider?
    collaborators      ShopCollaborator[]
}

enum CommerceProviderType {
    shopify
}

model CommerceProvider {
    id        String               @id @default(cuid())
    createdAt DateTime             @default(now())
    updatedAt DateTime             @updatedAt
    type      CommerceProviderType @default(shopify)
    data      Json
    shop      Shop                 @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shopId    String

    @@unique([shopId])
    @@index([shopId])
}

enum ContentProviderType {
    prismic
    shopify
}

model ContentProvider {
    id        String              @id @default(cuid())
    createdAt DateTime            @default(now())
    updatedAt DateTime            @updatedAt
    type      ContentProviderType @default(shopify)
    data      Json
    shop      Shop                @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shopId    String

    @@unique([shopId])
    @@index([shopId])
}

model CheckoutProvider {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    type      String
    data      Json
    shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shopId    String

    @@unique([shopId])
    @@index([shopId])
}

model BrandColor {
    id             String       @id @default(cuid())
    createdAt      DateTime     @default(now())
    updatedAt      DateTime     @updatedAt
    type           String
    variant        String
    accent         String
    background     String
    foreground     String
    shopBrandingId String
    shopBranding   ShopBranding @relation(fields: [shopBrandingId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([shopBrandingId])
    @@index([shopBrandingId])
}

model ShopBranding {
    id          String       @id @default(cuid())
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
    shopId      String
    shop        Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    brandColors BrandColor[]

    @@unique([shopId])
    @@index([shopId])
}

model ShopIconsImage {
    id          String    @id @default(cuid())
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    src         String
    width       Int
    height      Int
    shopIconsId String
    shopIcons   ShopIcons @relation(fields: [shopIconsId], references: [id], onDelete: Cascade, onUpdate: Cascade)

    @@unique([shopIconsId])
    @@index([shopIconsId])
}

model ShopIcons {
    id        String          @id @default(cuid())
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
    shopId    String
    shop      Shop            @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    faviconId String?
    favicon   ShopIconsImage?

    @@unique([shopId])
    @@index([shopId])
}
