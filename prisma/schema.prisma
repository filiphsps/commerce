datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL")
    directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String             @id @default(cuid())
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
    name          String?
    ghUsername    String?            @map("gh_username") // GitHub username
    email         String             @unique
    image         String?
    emailVerified DateTime?
    accounts      Account[]
    sessions      Session[]
    shops         ShopCollaborator[]
}

model Account {
    id                String   @id @default(cuid())
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
    userId            String
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    type              String
    provider          String
    providerAccountId String   @map("provider_account_id")
    refreshToken      String?  @map("refresh_token") @db.Text
    accessToken       String?  @map("access_token") @db.Text
    expiresAt         Int?     @map("expires_at")
    tokenType         String?  @map("token_type")
    scope             String?
    idToken           String?  @map("id_token") @db.Text
    sessionState      String?  @map("session_state")

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    sessionToken String   @unique
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires      DateTime

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model ShopCollaborator {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shopId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId    String

    @@index([shopId])
    @@index([userId])
}

model Shop {
    id                 String             @id
    createdAt          DateTime           @default(now())
    updatedAt          DateTime           @updatedAt
    name               String             @db.Text
    domain             String             @unique @db.Text
    alternativeDomains String[]           @default([])
    commerceProvider   CommerceProvider?
    contentProvider    ContentProvider?
    collaborators      ShopCollaborator[]
}

model CommerceProvider {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    data      Json
    shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shopId    String

    @@unique([shopId])
    @@index([shopId])
}

model ContentProvider {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    data      Json
    shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    shopId    String

    @@unique([shopId])
    @@index([shopId])
}
